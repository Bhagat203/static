{"version":3,"sources":["components/Search.jsx","components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","onChange","Card","props","className","alt","src","monster","id","name","email","CardList","map","moster","App","e","setState","searchFeild","target","value","state","this","filteredMonster","filter","toLowerCase","includes","a","fetch","response","json","json_response","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUACaA,EAAW,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aAEnC,OAAQ,uBAAOC,KAAK,SAASF,YAAaA,EACpCG,SAAUF,KCFNG,G,YAAK,SAACC,GAAD,OACd,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACvB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,aCHbC,EAAS,SAACR,GAEnB,OAAQ,qBAAKC,UAAU,YAAf,SACHD,EAAMI,QAAQK,KAAI,SAAAC,GAAM,OAAE,cAAC,EAAD,CAAsBN,QAEjDM,EAF2B,cAAWA,EAAOL,UCmCtCM,E,kDAnCZ,aAAc,IAAD,8BACX,gBA4BHf,aAAa,SAAAgB,GACX,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SA5BnC,EAAKC,MAAM,CACTb,QAAQ,GACRU,YAAY,IAJH,E,0CASd,WAAS,IAAD,EACuBI,KAAKD,MAA3Bb,EADD,EACCA,QAAQU,EADT,EACSA,YACTK,EAAgBf,EAAQgB,QAAO,SAAAV,GAAM,OAAEA,EAAOJ,KAAKe,cAAcC,SAASR,EAAYO,kBAC5F,OAEE,sBAAKpB,UAAU,MAAf,UACE,cAAC,EAAD,CAAWN,YAAY,mBACvBC,aAAcsB,KAAKtB,eACnB,cAAC,EAAD,CAAUQ,QAASe,S,+BAIzB,WAAoB,IAAD,OACjB,sBAAC,8BAAAI,EAAA,sEACqBC,MAAM,8CAD3B,cACKC,EADL,gBAEyBA,EAASC,OAFlC,OAEKC,EAFL,OAGC,EAAKd,SAAS,CAACT,QAAQuB,IAHxB,0CAAD,O,GAvBiBC,aCONC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7489c1fb.chunk.js","sourcesContent":["import React  from \"react\";\r\nexport const SearchBox =({placeholder,handleChange})=>{\r\n   \r\n   return( <input type=\"search\" placeholder={placeholder}\r\n         onChange={handleChange}/>)\r\n}","import { React } from \"react\"; \r\nimport '../card-list.stylesheet.css/card.css'\r\nexport const Card=(props)=>(\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\r\n       <h1>{props.monster.name}</h1>\r\n       <h2>{props.monster.email}</h2>\r\n       </div>\r\n)","import React from \"react\";\r\nimport './card-list.stylesheet.css/style.css'\r\nimport {Card} from './card/card.component'\r\nexport const CardList=(props)=>{\r\n\r\n    return (<div className=\"card-list\">\r\n        {props.monster.map(moster=><Card key={moster.id} monster={\r\n\r\n        moster}> </Card>)}\r\n        \r\n        </div>)\r\n}","\nimport './App.css';\nimport {Component} from 'react'\nimport { SearchBox } from './components/Search';\nimport { CardList} from './components/card-list/card-list.component'\n class  App  extends Component {\n   constructor(){\n     super();\n     this.state={\n       monster:[],\n       searchFeild:''\n     };\n\n   }\n   \n  render(){\n    const {monster,searchFeild }=this.state;\n    const filteredMonster=monster.filter(moster=>moster.name.toLowerCase().includes(searchFeild.toLowerCase()))\n    return (\n      \n      <div className=\"App\">\n        <SearchBox placeholder=\"enter the demons\"\n        handleChange={this.handleChange}/>\n        <CardList monster={filteredMonster}></CardList> \n      </div>\n    );\n  }\n  componentDidMount(){\n    (async()=>{\n      let response= await fetch('https://jsonplaceholder.typicode.com/users');\n      let json_response=await response.json();\n      this.setState({monster:json_response})\n    })();\n  }\n\n  handleChange=e=>{\n    this.setState({searchFeild:e.target.value})\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}